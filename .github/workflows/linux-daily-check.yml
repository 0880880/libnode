name: Linux

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: arm64
            is_arm: true
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    steps:
      - uses: actions/checkout@v4

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          save-always: true
          key: ${{ github.workflow }}-${{ matrix.arch }}-${{ hashFiles('**/version.txt') }}
          restore-keys: |
            ${{ github.workflow }}-${{ matrix.arch }}-${{ hashFiles('**/version.txt') }}
            ${{ github.workflow }}-${{ matrix.arch }}-

      - name: Install building tools (EL8)
        run: |
          dnf update -y
          dnf install -y epel-release
          dnf install -y gcc-toolset-12-gcc gcc-toolset-12-gcc-c++ gcc-toolset-12-binutils
          dnf install -y make git python3 python3-pip nasm ccache
          curl -sL https://rpm.nodesource.com/setup_21.x | bash -
          dnf install -y nodejs

          # Install cross-compilation tools for arm64 if building for arm64 on x86_64
          if [ "${{ matrix.arch }}" = "arm64" ] && [ "$(uname -m)" = "x86_64" ]; then
            echo "Installing aarch64 cross-compilation tools"
            dnf install -y \
              binutils-aarch64-linux-gnu \
              gcc-aarch64-linux-gnu \
              gcc-c++-aarch64-linux-gnu
          fi

      - name: Setup aarch64 sysroot
        if: matrix.arch == 'arm64'
        run: |
          # Download glibc-devel for aarch64
          dnf download --arch=aarch64 glibc-devel
          # Create sysroot directory
          mkdir -p /tmp/aarch64-sysroot
          # Extract the RPM into the sysroot
          rpm2cpio glibc-devel-*.aarch64.rpm | cpio -idmv -D /tmp/aarch64-sysroot

      - name: Run the script (EL8)
        shell: scl enable gcc-toolset-12 -- bash {0}
        env:
          ARCH: ${{ matrix.arch }}
          CC: "${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-gcc' || 'gcc' }}"
          CXX: "${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-g++' || 'g++' }}"
          CFLAGS: "-O2 -fPIC"
          CXXFLAGS: "-O2 -fPIC -Wno-error=deprecated-declarations"
          LDFLAGS: "-Wl,--as-needed"
          CCACHE_COMPRESS: "true"
          CCACHE_BASEDIR: "$GITHUB_WORKSPACE"
          CCACHE_DIR: "$GITHUB_WORKSPACE/.ccache"
        run: |
          echo "--- Verifying Compiler Versions ---"
          which gcc
          ${CC} --version
          which g++
          ${CXX} --version
          echo "--- End Verification ---"

          mkdir -p "$CCACHE_DIR"
          export PATH="/usr/lib64/ccache:$PATH"

          echo "PATH is: $PATH"
          echo "Using CC: $CC"
          echo "Using CXX: $CXX"

          # Pass sysroot flag for arm64 builds
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            SYSROOT_FLAG="--with-sysroot=/tmp/aarch64-sysroot"
          else
            SYSROOT_FLAG=""
          fi
          node index.js $SYSROOT_FLAG

      - name: Create archive
        run: |
          cd node/out/Release
          ln -sf libnode.so.* libnode.so
          tar -cJf "libnode-${{ matrix.arch }}-linux.tar.xz" libnode.* node

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          overwrite: true
          tag: ${{ github.ref }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: node/out/Release/libnode-${{ matrix.arch }}-linux.tar.xz
