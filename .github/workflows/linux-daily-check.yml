name: Linux

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: arm64
            is_arm: true
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    steps:
      - uses: actions/checkout@v4

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          save-always: true
          key: ${{ github.workflow }}-${{ matrix.arch }}-${{ hashFiles('**/version.txt') }}
          restore-keys: |
            ${{ github.workflow }}-${{ matrix.arch }}-${{ hashFiles('**/version.txt') }}
            ${{ github.workflow }}-${{ matrix.arch }}- # Fallback key

      # --- Install building tools using default container repos ---
      # This step relies on the packages available in the standard
      # repos configured within the manylinux_2_28_x86_64 image.
      - name: Install building tools (using default repos)
        run: |
          # Update package list (optional, but good practice)
          dnf update -y

          # Install core building tools
          # These should be available in the default AppStream/BaseOS repos
          dnf install -y \
            make git python3 python3-pip nasm ccache \
            gcc gcc-c++ # Install default system compiler

          # Attempt to install Node.js from default repos (likely AppStream)
          # Note: The version might be older than NodeSource
          dnf install -y nodejs

          # For cross-compiling to ARM64
          # These cross-development packages should also be in default/CRB repos
          if [ "${{ matrix.arch }}" = "arm64" ] && [ "$(uname -m)" = "x86_64" ]; then
            echo "Installing aarch64 cross-compiler and development libraries..."
            dnf install -y \
              binutils-aarch64-linux-gnu \
              gcc-aarch64-linux-gnu \
              gcc-c++-aarch64-linux-gnu \
              glibc-devel.aarch64 \
              libstdc++-devel.aarch64

            # Error handling: Check if install succeeded
            if [ $? -ne 0 ]; then
              echo "Error: Failed to install aarch64 cross-dev packages."
              echo "Searching for glibc-devel aarch64..."
              dnf search glibc-devel | grep aarch64 || echo "glibc-devel.aarch64 not found via search."
              echo "Searching for libstdc++-devel aarch64..."
              dnf search libstdc++-devel | grep aarch64 || echo "libstdc++-devel.aarch64 not found via search."
              echo "Ensure these packages are available in the default repositories of the chosen manylinux image."
              exit 1 # Fail the step if packages are not found/installed
            fi
          fi

          # Verify installed tools (optional)
          echo "Verifying tool versions:"
          gcc --version || echo "Default gcc not found"
          g++ --version || echo "Default g++ not found"
          which aarch64-linux-gnu-gcc || echo "aarch64-linux-gnu-gcc not found"
          node --version || echo "Node.js not found"
          python3 --version || echo "Python3 not found"
          make --version || echo "Make not found"
          ccache --version || echo "ccache not found"


      # --- Run the build script ---
      - name: Run the script
        # Removed 'shell: scl enable...' - now using default environment
        env:
          ARCH: ${{ matrix.arch }}
          # Set CC/CXX based on target architecture
          CC: "${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-gcc' || 'gcc' }}"
          CXX: "${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-g++' || 'g++' }}"
          CFLAGS: "-O2 -fPIC"
          # Added -Wno-error=deprecated-declarations workaround, ensure -std=c++20 is NOT used
          CXXFLAGS: "-O2 -fPIC -Wno-error=deprecated-declarations"
          LDFLAGS: "-Wl,--as-needed"
          # CCACHE setup
          CCACHE_COMPRESS: "true"
          CCACHE_BASEDIR: "$GITHUB_WORKSPACE"
          CCACHE_DIR: "$GITHUB_WORKSPACE/.ccache"
        run: |
          echo "--- Verifying Compiler Versions being used by build system ---"
          echo "Using CC: ${CC}"
          echo "Using CXX: ${CXX}"
          ${CC} --version
          ${CXX} --version
          echo "--- End Verification ---"

          # Ensure ccache directory exists (redundant with actions/cache restore, but harmless)
          mkdir -p "$CCACHE_DIR"

          # Prepend ccache to the PATH *within* the current shell session.
          # Ccache should be in a standard bin directory like /usr/bin.
          export PATH="/usr/bin/ccache:$PATH" # Use standard /usr/bin path

          echo "Final PATH is: $PATH"

          # Execute the build script using Node.js
          node index.js

      - name: Create archive
        run: |
          cd node/out/Release
          # Symlink might link to a versioned file like libnode.so.XX
          # Ensure the symlink points to the *actual* built library file
          # Find the actual shared library name first
          LIBNODE_SO=$(find . -maxdepth 1 -name 'libnode.so.*' -type f | head -n 1)
          if [ -z "$LIBNODE_SO" ]; then
              echo "Error: libnode.so.* not found in node/out/Release"
              exit 1
          fi
          echo "Creating symlink libnode.so -> ${LIBNODE_SO}"
          ln -sf $(basename "$LIBNODE_SO") libnode.so # Symlink target should be just the filename

          # Create the tar archive
          tar -cJf "libnode-${{ matrix.arch }}-linux.tar.xz" libnode.* node

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          overwrite: true
          tag: ${{ github.ref }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: node/out/Release/libnode-${{ matrix.arch }}-linux.tar.xz

