name: Linux

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  update:
    # Always run the job orchestration on ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            manylinux_arch: x86_64
            use_docker: false # Flag to indicate if explicit docker is needed
          - arch: arm64
            manylinux_arch: aarch64
            use_docker: true # Flag to indicate if explicit docker is needed

    # NO top-level container definition here

    steps:
      # STEP 1: Set up QEMU (only needed for the ARM build running on x86_64 host)
      - name: Set up QEMU
        if: matrix.use_docker == true # Only if we need emulation
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # STEP 2: Checkout code (runs on the host runner)
      - uses: actions/checkout@v4

      # STEP 3: Setup ccache (caches on the host runner filesystem)
      - name: Setup ccache
        uses: actions/cache@v4
        with:
          # Path is relative to GITHUB_WORKSPACE on the HOST
          path: ${{ github.workspace }}/.ccache
          save-always: true
          key: ccache-${{ github.workflow }}-${{ matrix.arch }}-${{ hashFiles('**/version.txt') }}
          restore-keys: |
            ccache-${{ github.workflow }}-${{ matrix.arch }}-

      # STEP 4: Install tools and Build (conditional execution)

      # AMD64 Native Path (using SCL directly on host if needed, or inside a native container if preferred)
      # For simplicity, let's assume amd64 can also run inside its container like before.
      # We could simplify further and run amd64 natively on the host if toolsets allow.
      # Let's keep it consistent and use containers for both.

      - name: Build (amd64 Native Container)
        if: matrix.use_docker == false
        # Use the specific x86_64 image because the 'if' condition guarantees this matrix combo
        uses: docker://quay.io/pypa/manylinux_2_28_x86_64
        with:
          entrypoint: /bin/bash
          args: -ec |
            echo "--- Running inside amd64 container ---"
            uname -m
            export DEBIAN_FRONTEND=noninteractive
            dnf update -y --setopt=tsflags=nodocs
            dnf install -y epel-release || echo "EPEL failed, continuing..."
            dnf install -y gcc-toolset-12-gcc gcc-toolset-12-gcc-c++ gcc-toolset-12-binutils make git python3 python3-pip nasm ccache curl
            curl -fsSL https://rpm.nodesource.com/setup_21.x | bash -
            dnf install -y nodejs
            dnf clean all
            rm -rf /var/cache/dnf

            echo "--- Enabling SCL and running build ---"
            
            export ARCH=${{ matrix.arch }}
            export CC="gcc"
            export CXX="g++"
            export CFLAGS="-O2 -fPIC"
            export CXXFLAGS="-O2 -fPIC -Wno-error=deprecated-declarations"
            export LDFLAGS="-Wl,--as-needed"
            export CCACHE_COMPRESS="true"
            
            export CCACHE_BASEDIR="/github/workspace"
            export CCACHE_DIR="/github/workspace/.ccache"
            export CCACHE_MAXSIZE="5G"

            mkdir -p "$CCACHE_DIR"
            export PATH="/usr/lib64/ccache:$PATH"

            ccache -z
            ccache -s
            echo "Compiler versions:"
            scl enable gcc-toolset-12 -- bash -ec 'gcc --version; g++ --version; which gcc; which g++'
            echo "PATH:$PATH"
            echo "Starting build..."
            scl enable gcc-toolset-12 -- bash -ec 'node index.js'
            echo "Build finished."
            ccache -s

            echo "--- Creating archive ---"
            cd /github/workspace/node/out/Release || exit 1
            SO_FILE=$(ls libnode.so.* | head -n 1) || exit 1
            echo "Found SO file: $SO_FILE"
            ln -sf "$SO_FILE" libnode.so
            tar -cvJf "/github/workspace/libnode-${ARCH}-linux.tar.xz" libnode.so "$SO_FILE" node
            echo "Archive created at /github/workspace/libnode-${ARCH}-linux.tar.xz"
            ls -l "/github/workspace/libnode-${ARCH}-linux.tar.xz"

      - name: Build (arm64 Emulated via Docker)
        if: matrix.use_docker == true
        # env block remains the same
        env:
          ARCH: ${{ matrix.arch }}
          # ... other env vars ...
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "--- Starting Docker container for ARM64 build ---"
          # The image name here CAN use matrix context because it's inside a 'run' script
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            # Pass env vars explicitly
            -e ARCH \
            -e CC \
            -e CXX \
            -e CFLAGS \
            -e CXXFLAGS \
            -e LDFLAGS \
            -e CCACHE_COMPRESS \
            -e CCACHE_BASEDIR \
            -e CCACHE_DIR \
            -e CCACHE_MAXSIZE \
            -e DEBIAN_FRONTEND \
            quay.io/pypa/manylinux_2_28_${{ matrix.manylinux_arch }} \
            bash -ec '
              echo "--- Running inside arm64 container ---"
              uname -m
              dnf update -y --setopt=tsflags=nodocs
              dnf install -y epel-release || echo "EPEL failed, continuing..."
              dnf install -y gcc-toolset-12-gcc gcc-toolset-12-gcc-c++ gcc-toolset-12-binutils make git python3 python3-pip nasm ccache curl
              curl -fsSL https://rpm.nodesource.com/setup_21.x | bash -
              dnf install -y nodejs
              dnf clean all
              rm -rf /var/cache/dnf

              echo "--- Enabling SCL and running build ---"
              mkdir -p "$CCACHE_DIR" # Ensure cache dir exists inside container
              export PATH="/usr/lib64/ccache:$PATH"

              ccache -z
              ccache -s
              echo "Compiler versions:"
              scl enable gcc-toolset-12 -- bash -ec "gcc --version; g++ --version; which gcc; which g++"
              echo "PATH: $PATH"
              echo "Starting build..."
              scl enable gcc-toolset-12 -- bash -ec "node index.js"
              echo "Build finished."
              ccache -s

              echo "--- Creating archive ---"
              # Workspace is mounted at /workspace
              cd /workspace/node/out/Release || exit 1
              SO_FILE=$(ls libnode.so.* | head -n 1) || exit 1
              ln -sf "$SO_FILE" libnode.so
              # Create archive directly in the mounted workspace directory
              tar -cvJf "/workspace/libnode-${ARCH}-linux.tar.xz" libnode.so "$SO_FILE" node
              echo "Archive created at /workspace/libnode-${ARCH}-linux.tar.xz"
              ls -l "/workspace/libnode-${ARCH}-linux.tar.xz"
            ' # End of bash -ec block for docker run

      # STEP 5: Upload (runs on host, file is in the workspace)
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          overwrite: true
          tag: ${{ github.ref }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          # File path is relative to GITHUB_WORKSPACE on the host
          file: libnode-${{ matrix.arch }}-linux.tar.xz
          file_glob: false
