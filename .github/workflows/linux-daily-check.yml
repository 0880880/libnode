name: Linux

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: arm64
            is_arm: true
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    steps:
      - uses: actions/checkout@v4

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          save-always: true
          key: ${{ github.workflow }}-${{ matrix.arch }}-${{ hashFiles('**/version.txt') }}
          restore-keys: |
            ${{ github.workflow }}-${{ matrix.arch }}-${{ hashFiles('**/version.txt') }}
            ${{ github.workflow }}-${{ matrix.arch }}-

      - name: Install building tools (EL8)
        # Running on AlmaLinux 8 or similar (RHEL 8 based)
        run: |
          dnf update -y
          # Install EPEL
          dnf install -y epel-release || true
          # Install core dnf plugins to get config-manager
          dnf install -y dnf-plugins-core
          # Enable the CodeReady Builder (CRB) repository - often needed for -devel packages
          dnf config-manager --set-enabled crb
          echo "Enabled repositories:"
          dnf repolist enabled # Optional: Check which repos are now enabled

          # Install GCC Toolset 12 for a modern compiler (for host)
          dnf install -y gcc-toolset-12-gcc gcc-toolset-12-gcc-c++ gcc-toolset-12-binutils
          # Install other required tools
          dnf install -y make git python3 python3-pip nasm ccache
          # Install Node.js (for host build process)
          curl -sL https://rpm.nodesource.com/setup_21.x | bash -
          dnf install -y nodejs

          # For cross-compiling to ARM64 if we're on x86_64
          if [ "${{ matrix.arch }}" = "arm64" ] && [ "$(uname -m)" = "x86_64" ]; then
            echo "Installing aarch64 cross-compiler and development libraries..."
            # Retry installing cross-compiler tools AND the target's standard library development files
            # Now that 'crb' repo is enabled, these might be found
            dnf install -y \
              binutils-aarch64-linux-gnu \
              gcc-aarch64-linux-gnu \
              gcc-c++-aarch64-linux-gnu \
              glibc-devel.aarch64 \
              libstdc++-devel.aarch64

            # Optional: Check cross-compiler version if needed
            echo "--- Verifying Cross-Compiler Version ---"
            aarch64-linux-gnu-gcc --version
            aarch64-linux-gnu-g++ --version
            echo "--- End Verification ---"
          fi

      - name: Run the script (EL8)
        # Use scl enable with the correct toolset name for EL8
        shell: scl enable gcc-toolset-12 -- bash {0}
        env:
          ARCH: ${{ matrix.arch }}
          CC: "${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-gcc' || 'gcc' }}"
          CXX: "${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-g++' || 'g++' }}"
          CFLAGS: "-O2 -fPIC"
          # ---> CRITICAL: Ensure -std=c++20 is NOT here <---
          # ---> Include the fix for OpenSSL deprecation warnings <---
          CXXFLAGS: "-O2 -fPIC -Wno-error=deprecated-declarations"
          LDFLAGS: "-Wl,--as-needed"
          # CCACHE setup
          CCACHE_COMPRESS: "true"
          CCACHE_BASEDIR: "$GITHUB_WORKSPACE"
          CCACHE_DIR: "$GITHUB_WORKSPACE/.ccache"
        run: |
          # Verify the compiler version being used (should be GCC 11.x now for native)
          echo "--- Verifying Compiler Versions ---"
          which gcc
          ${CC} --version
          which g++
          ${CXX} --version
          echo "--- End Verification ---"

          # Ensure ccache directory exists
          mkdir -p "$CCACHE_DIR"
          # Prepend ccache to the PATH *within* the SCL environment
          # Use the standard ccache path for EL8
          export PATH="/usr/lib64/ccache:$PATH"

          echo "PATH is: $PATH"
          echo "Using CC: $CC"
          echo "Using CXX: $CXX"

          node index.js

      - name: Create archive
        run: |
          cd node/out/Release
          ln -sf libnode.so.* libnode.so
          tar -cJf "libnode-${{ matrix.arch }}-linux.tar.xz" libnode.* node

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          overwrite: true
          tag: ${{ github.ref }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: node/out/Release/libnode-${{ matrix.arch }}-linux.tar.xz
