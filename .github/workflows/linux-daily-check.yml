name: Linux

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: arm64
            is_arm: true
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64:latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          save-always: true
          key: ${{ github.workflow }}-${{ matrix.arch }}-${{ hashFiles('**/version.txt') }}
          restore-keys: |
            ${{ github.workflow }}-${{ matrix.arch }}-${{ hashFiles('**/version.txt') }}
            ${{ github.workflow }}-${{ matrix.arch }}-

      - name: Install building tools
        run: |
          # Update base OS and enable EPEL
          dnf update -y
          dnf install -y epel-release

          # Install core build tools
          dnf groupinstall -y "Development Tools"        # :contentReference[oaicite:0]{index=0}
          dnf install -y ccache nasm python3 python3-pip

          # Add NodeSource RPM repo for Node.js 21.x and install Node.js
          curl -sL https://rpm.nodesource.com/setup_21.x | bash -  # :contentReference[oaicite:1]{index=1}
          dnf install -y git nodejs

          # Cross‚Äêcompile toolchain for aarch64
          dnf install -y \
            glibc-devel \
            glibc-devel.aarch64 \
            binutils-aarch64-linux-gnu \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      - name: Run the script
        env:
          ARCH: ${{ matrix.arch }}
          CC: ${{ matrix.is_arm && 'aarch64-linux-gnu-gcc' || 'gcc' }}
          CXX: ${{ matrix.is_arm && 'aarch64-linux-gnu-g++' || 'g++' }}
          CC_host: ${{ matrix.is_arm && 'gcc' || null }}
          CXX_host: ${{ matrix.is_arm && 'g++' || null }}
          AS: ${{ matrix.is_arm && 'aarch64-linux-gnu-as' || null }}
          LD: ${{ matrix.is_arm && 'aarch64-linux-gnu-ld' || null }}
          RANLIB: ${{ matrix.is_arm && 'aarch64-linux-gnu-ranlib' || null }}
        run: |
          export CCACHE_COMPRESS="true"
          export CCACHE_BASEDIR="$GITHUB_WORKSPACE"
          export CCACHE_DIR="$CCACHE_BASEDIR/.ccache"
          export PATH="/usr/lib64/ccache:/usr/local/opt/ccache/libexec:$PATH"
          mkdir -p "$CCACHE_DIR"

          node index.js

      - name: Create archive
        run: |
          cd node/out/Release
          ln libnode.so.* libnode.so
          tar -cJf "libnode-${{ matrix.arch }}-linux.tar.xz" libnode.* node

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          overwrite: true
          tag: ${{ github.ref }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: node/out/Release/libnode-${{ matrix.arch }}-linux.tar.xz
          
